{"version":3,"file":"docs-script.bundle.js","mappings":"mBAAA,MAAMA,EAA4C,GAG5CC,EAASC,GAAwBA,EAAYD,MAAM,OAAOE,QAAOC,KAASA,IAE1EC,EAAU,SAAqBC,KAAkBC,GACtD,MAAMC,EAASP,EAAMK,GAErB,GAAIE,EAAOC,OAAS,EACnB,IAAK,MAAMH,KAASE,EACnBH,EAAQK,KAAKC,KAAML,KAAUC,QAEpBD,KAASN,GACDA,EAAcM,GAEtBM,SAASC,IAClBA,EAASC,MAAM,KAAMP,OAKlBQ,EAAY,SAAUT,EAAeO,GAC1C,MAAML,EAASP,EAAMK,GAErB,GAAIE,EAAOC,OAAS,EACnB,IAAK,MAAMH,KAASE,EACnBO,EAAUT,EAAOO,OAEZ,CACAP,KAASN,IACdA,EAAcM,GAAS,IAGxB,MAAMU,EAAYhB,EAAcM,IAGK,IAAjCU,EAAUC,SAASJ,IACtBG,EAAUE,KAAKL,KCnClB,IAAIM,EAAiB,EACrB,MAAMC,EAAUC,SAASC,eAAe,kBAElC,EAAQ,gBACRT,EAAYU,GAAiBH,EAASI,WAAaL,GAAkBI,GAAQ,GAGnFF,SAASI,iBAAiB,yBAAyBb,SAASc,GAAQA,EAAIC,iBAAiB,SAAS,IAAMZ,EAAU,EAAOF,OACzHQ,SAASI,iBAAiB,uBAAuBb,SAASc,GAAQA,EAAIC,iBAAiB,SAAS,IAAMtB,EAAQ,EAAO,OACrHgB,SAASI,iBAAiB,2BAA2Bb,SAASc,GAAQA,EAAIC,iBAAiB,SAAS,ID+BhF,SAAUrB,EAAeO,GAC5C,GAAIP,KAASN,EAAe,CAC3B,MAAMgB,EAAYhB,EAAcM,GAC1BsB,EAAQZ,EAAUa,QAAQhB,IAEjB,IAAXe,GACHZ,EAAUc,OAAOF,EAAO,ICrC+EG,CAAY,EAAOlB,Q","sources":["webpack://@cipscis/pubsub/./src/pubsub.ts","webpack://@cipscis/pubsub/./docs/assets/js/src/docs-script.ts"],"sourcesContent":["const subscriptions: Record<string, Function[]> = {};\n\n// Split by whitespace, then remove any empty strings\nconst split = (eventString: string) => eventString.split(/\\s+/).filter(str => !!str);\n\nconst publish = function (this: any, event: string, ...args: any[]) {\n\tconst events = split(event);\n\n\tif (events.length > 1) {\n\t\tfor (const event of events) {\n\t\t\tpublish.call(this, event, ...args);\n\t\t}\n\t} else if (event in subscriptions) {\n\t\tconst callbacks = subscriptions[event];\n\n\t\tcallbacks.forEach((callback) => {\n\t\t\tcallback.apply(null, args);\n\t\t});\n\t}\n};\n\nconst subscribe = function (event: string, callback: Function) {\n\tconst events = split(event);\n\n\tif (events.length > 1) {\n\t\tfor (const event of events) {\n\t\t\tsubscribe(event, callback);\n\t\t}\n\t} else {\n\t\tif (!(event in subscriptions)) {\n\t\t\tsubscriptions[event] = [];\n\t\t}\n\n\t\tconst callbacks = subscriptions[event];\n\n\t\t// Don't bind a particular function to an event more than once\n\t\tif (callbacks.includes(callback) === false) {\n\t\t\tcallbacks.push(callback);\n\t\t}\n\t}\n};\n\nconst unsubscribe = function (event: string, callback: Function) {\n\tif (event in subscriptions) {\n\t\tconst callbacks = subscriptions[event];\n\t\tconst index = callbacks.indexOf(callback);\n\n\t\tif (index !== -1) {\n\t\t\tcallbacks.splice(index, 1);\n\t\t}\n\t}\n};\n\nexport { publish, subscribe, unsubscribe };\n","import { publish, subscribe, unsubscribe } from '@cipscis/pubsub';\n\nlet timesPublished = 0;\nconst $output = document.getElementById('example-output');\n\nconst event = 'example-event';\nconst callback = (incr: number) => $output!.innerHTML = (timesPublished += incr) + '';\nconst args = [1, 2, 3];\n\ndocument.querySelectorAll('.js-example-subscribe').forEach(($el) => $el.addEventListener('click', () => subscribe(event, callback)));\ndocument.querySelectorAll('.js-example-publish').forEach(($el) => $el.addEventListener('click', () => publish(event, 1)));\ndocument.querySelectorAll('.js-example-unsubscribe').forEach(($el) => $el.addEventListener('click', () => unsubscribe(event, callback)));\n"],"names":["subscriptions","split","eventString","filter","str","publish","event","args","events","length","call","this","forEach","callback","apply","subscribe","callbacks","includes","push","timesPublished","$output","document","getElementById","incr","innerHTML","querySelectorAll","$el","addEventListener","index","indexOf","splice","unsubscribe"],"sourceRoot":""}